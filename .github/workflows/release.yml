name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          title: $version
          token: ${{ secrets.GH_PAT }}

  upload-assets:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   audio_backend: alsa_backend
          - target: aarch64-apple-darwin
            os: macos-latest
          # Universal macOS binary is supported as universal-apple-darwin.
          # - target: universal-apple-darwin
          #   os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install alsa
        if: matrix.os == 'ubuntu-latest' 
        run: sudo apt-get install libasound2-dev
      - name: Install libjack
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libjack-jackd2-dev libjack-jackd2-0
      - name: Installing needed Ubuntu armhf dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo mkdir -p /build/sysroot
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y -qq gcc-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross
          sudo apt-get download libasound2:armhf libasound2-dev:armhf libssl-dev:armhf libssl1.1:armhf
          sudo dpkg -x libasound2_*.deb /build/sysroot/
          sudo dpkg -x libssl-dev*.deb /build/sysroot/
          sudo dpkg -x libssl1.1*.deb /build/sysroot/
          sudo dpkg -x libasound2-dev*.deb /build/sysroot/
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "TEST=abc" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=arm-linux-gnueabihf-gcc -L/usr/arm-linux-gnueabihf/lib -L/build/sysroot/usr/lib/arm-linux-gnueabihf -L/build/sysroot/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/build/sysroot/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/build/sysroot/usr/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/build/sysroot/usr/include/arm-linux-gnueabihf" >> $GITHUB_ENV
      - name: Installing needed Ubuntu armhf dependencies (full)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          # Make dbus-rs cross-compile, see https://github.com/diwic/dbus-rs/issues/184#issuecomment-520228758
          sudo apt-get download libdbus-1-dev:armhf libdbus-1-3:armhf libsystemd0:armhf libgcrypt20:armhf liblzma5:armhf liblz4-1:armhf libgpg-error0:armhf
          sudo dpkg -x libdbus-1-3*.deb /build/sysroot/
          sudo dpkg -x libdbus-1-dev*.deb /build/sysroot/
          sudo dpkg -x libsystemd0*.deb /build/sysroot/
          sudo dpkg -x libgcrypt20_*.deb /build/sysroot/
          sudo dpkg -x liblzma5_*.deb /build/sysroot/
          sudo dpkg -x liblz4-1_*.deb /build/sysroot/
          sudo dpkg -x libgpg-error0_*.deb /build/sysroot/
          sudo cp -r /build/sysroot/lib/* /build/sysroot/usr/lib/
          sudo ln -frs /build/sysroot/lib/arm-linux-gnueabihf/libdbus-1.so.3 /build/sysroot/lib/arm-linux-gnueabihf/libdbus-1.so
          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libgcrypt.so.20 /build/sysroot/lib/arm-linux-gnueabihf/libgcrypt.so
          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libgpg-error.so.0 /build/sysroot/lib/arm-linux-gnueabihf/libgpg-error.so
          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/liblzma.so.5 /build/sysroot/lib/arm-linux-gnueabihf/liblzma.so
          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libsystemd.so.0 /build/sysroot/lib/arm-linux-gnueabihf/libsystemd.so
          sudo ln -rs /build/sysroot/usr/lib/arm-linux-gnueabihf/liblz4.so.1 /build/sysroot/usr/lib/arm-linux-gnueabihf/liblz4.so
          sudo mkdir -p /.cargo
          echo -e '[target.arm-unknown-linux-gnueabihf.dbus]\nrustc-link-lib = ["dbus-1", "gcrypt", "gpg-error", "lz4", "lzma", "systemd"]' | sudo tee -a /.cargo/config

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')    
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: wooshh
          # (optional) Target triple, default is host triple.
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          include: LICENSE,README.md
          # (required) GitHub token for uploading assets to GitHub Releases.
          token: ${{ secrets.GH_PAT }}